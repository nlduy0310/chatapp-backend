{
	"info": {
		"_postman_id": "8e9819b5-6934-4deb-b7d9-d64c5d5c112a",
		"name": "Auth",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33163440"
	},
	"item": [
		{
			"name": "Register",
			"item": [
				{
					"name": "Invalid Request Body",
					"item": [
						{
							"name": "Empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test(\"Correct error message\", function () {\r",
											"    pm.response.to.have.body(\"'email' field is required\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing email field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test(\"Correct error message\", function () {\r",
											"    pm.response.to.have.body(\"'email' field is required\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"asd123456qwe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid email type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test(\"Correct error message\", function () {\r",
											"    pm.response.to.have.body(\"'email' must be a string\");\r",
											"});\r",
											"\r",
											"var values = pm.environment.get(\"values\");\r",
											"if (values && values.length > 0) {\r",
											"    postman.setNextRequest(\"Invalid email type\")\r",
											"}\r",
											"else {\r",
											"    pm.environment.unset(\"values\");\r",
											"    pm.environment.unset(\"body\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var values = pm.environment.get(\"values\");\r",
											"\r",
											"if (!values) {\r",
											"    values = [101, false, [\"a\", 101, false]];\r",
											"}\r",
											"\r",
											"var currentValue = values.shift();\r",
											"var body = {\r",
											"    email: currentValue\r",
											"}\r",
											"pm.environment.set(\"body\", JSON.stringify(body));\r",
											"pm.environment.set(\"values\", values);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid email address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test(\"Correct error message\", function () {\r",
											"    pm.response.to.have.body(\"Invalid email address\");\r",
											"});\r",
											"\r",
											"var values = pm.environment.get(\"values\");\r",
											"if (values && values.length > 0) {\r",
											"    postman.setNextRequest(\"Invalid email address\")\r",
											"}\r",
											"else {\r",
											"    pm.environment.unset(\"values\");\r",
											"    pm.environment.unset(\"body\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var values = pm.environment.get(\"values\");\r",
											"\r",
											"if (!values) {\r",
											"    values = [\"namegmail.com\", \"name@@gmail.com\", \"a@g.\"];\r",
											"}\r",
											"\r",
											"var currentValue = values.shift();\r",
											"var body = {\r",
											"    email: currentValue\r",
											"}\r",
											"pm.environment.set(\"body\", JSON.stringify(body));\r",
											"pm.environment.set(\"values\", values);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing password field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test(\"Correct error message\", function () {\r",
											"    pm.response.to.have.body(\"'password' field is required\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"name@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid password type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test(\"Correct error message\", function () {\r",
											"    pm.response.to.have.body(\"'password' must be a string\");\r",
											"});\r",
											"\r",
											"var values = pm.environment.get(\"values\");\r",
											"if (values && values.length > 0) {\r",
											"    postman.setNextRequest(\"Invalid password type\")\r",
											"}\r",
											"else {\r",
											"    pm.environment.unset(\"values\");\r",
											"    pm.environment.unset(\"body\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var values = pm.environment.get(\"values\");\r",
											"\r",
											"if (!values) {\r",
											"    values = [101, false, [\"a\", 101, false]];\r",
											"}\r",
											"\r",
											"var currentValue = values.shift();\r",
											"var body = {\r",
											"    email: \"name@gmail.com\",\r",
											"    password: currentValue\r",
											"}\r",
											"pm.environment.set(\"body\", JSON.stringify(body));\r",
											"pm.environment.set(\"values\", values);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid password length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test(\"Correct error message\", function () {\r",
											"    pm.response.to.have.body(\"'password' field's length must be between 8 and 32\");\r",
											"});\r",
											"\r",
											"var values = pm.environment.get(\"values\");\r",
											"if (values && values.length > 0) {\r",
											"    postman.setNextRequest(\"Invalid password length\")\r",
											"}\r",
											"else {\r",
											"    pm.environment.unset(\"values\");\r",
											"    pm.environment.unset(\"body\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var values = pm.environment.get(\"values\");\r",
											"\r",
											"if (!values) {\r",
											"    values = [\r",
											"        \"asd123\", \r",
											"        \"asd123asd123asd123asd123asd123asd123asd123asd123asd123asd123asd123asd123\"];\r",
											"}\r",
											"\r",
											"var currentValue = values.shift();\r",
											"var body = {\r",
											"    email: \"name@gmail.com\",\r",
											"    password: currentValue\r",
											"}\r",
											"pm.environment.set(\"body\", JSON.stringify(body));\r",
											"pm.environment.set(\"values\", values);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Password is not alpha-numeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test(\"Correct error message\", function () {\r",
											"    pm.response.to.have.body(\"'password' must be an alphanumeric string\");\r",
											"});\r",
											"\r",
											"var values = pm.environment.get(\"values\");\r",
											"if (values && values.length > 0) {\r",
											"    postman.setNextRequest(\"Password is not alpha-numeric\");\r",
											"}\r",
											"else {\r",
											"    pm.environment.unset(\"values\");\r",
											"    pm.environment.unset(\"body\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var values = pm.environment.get(\"values\");\r",
											"\r",
											"if (!values) {\r",
											"    values = [\"asd123hdf@\", \"jrdf624dD?\"];\r",
											"}\r",
											"\r",
											"var currentValue = values.shift();\r",
											"var body = {\r",
											"    email: \"name@gmail.com\",\r",
											"    password: currentValue\r",
											"}\r",
											"pm.environment.set(\"body\", JSON.stringify(body));\r",
											"pm.environment.set(\"values\", values);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Valid Request  Body",
					"item": [
						{
							"name": "Existing email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"})\r",
											"\r",
											"pm.test(\"Correct error message\", function () {\r",
											"    pm.response.to.have.body('Email has already been used');\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"mheineke0@ted.com\",\r\n    \"password\": \"asdqwd123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Non-existing email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test(\"Success message\", function () {\r",
											"    pm.response.to.have.body('Account registered successfully');\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"mynewemail@outlook.com\",\r\n    \"password\": \"abcde12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Preconditions:\n\n- \"mheineke0@ted.com\" is already used\n- \"mynewemail@outlook.com\" is not used"
		},
		{
			"name": "Authenticate",
			"item": [
				{
					"name": "Invalid email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401)\r",
									"})\r",
									"\r",
									"pm.test(\"Correct error message\", function() {\r",
									"    pm.response.to.have.body(\"Failed to authenticate: Can not find the specified user\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"abc@gmail.com\",\r\n    \"password\": \"123asd456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function() {\r",
									"    pm.response.to.have.status(401)\r",
									"})\r",
									"\r",
									"pm.test(\"Correct error message\", function() {\r",
									"    pm.response.to.have.body(\"Failed to authenticate: Credentials do not match\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"mheineke0@ted.com\",\r\n    \"password\": \"123456asdfgh\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Correct credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Session cookie is set\", function() {\r",
									"    pm.expect(pm.cookies.has(\"connect.sid\")).to.be.true\r",
									"})\r",
									"\r",
									"let sessionCookie = pm.response.cookies.get(\"connect.sid\")\r",
									"if (sessionCookie) {\r",
									"    pm.environment.set(\"sessionCookie\", sessionCookie)\r",
									"}\r",
									"else {\r",
									"    postman.setNextRequest(null)\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"mheineke0@ted.com\",\r\n    \"password\": \"zSncw8M4ePwU\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000"
		}
	]
}